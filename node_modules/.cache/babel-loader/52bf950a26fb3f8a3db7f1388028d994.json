{"ast":null,"code":"var _jsxFileName = \"/home/codecrunch/Documents/react/context-api/src/Memo.js\";\nimport React, { useState, useMemo, useCallback } from \"react\";\nimport { useEffect } from \"react\";\n\nconst Memo = () => {\n  // We create two states that will keep count of the number of time all hooks are called\n  const [callbackCount, setCallbackCount] = useState(0);\n  const [memoCount, setMemoCount] = useState(0);\n\n  const memoFunction = () => {\n    console.log(memoCount, \"memo called\"); // Do something that will take a lot of processing ...\n  }; // Here if we give an empty array of dependencies, the callback function will return the old value of callbackCount\n  // because useCallback will return its memoized version\n\n\n  const callbackFunction = useCallback(() => {\n    console.log(callbackCount, \"callback called\"); // Do something with callbackCount ...\n\n    return callbackCount;\n  }, [callbackCount]); // We create the memo hook, when memoCount changes, the function will be executed again\n\n  useMemo(memoFunction, [memoCount]);\n  return React.createElement(React.Fragment, null, React.createElement(ChildComponent, {\n    action: callbackFunction,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    style: {\n      border: 'none',\n      width: 200,\n      background: 'lightblue',\n      padding: 10,\n      marginRight: 5\n    },\n    onClick: () => setCallbackCount(callbackCount + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Change callback count\"), React.createElement(\"button\", {\n    style: {\n      border: 'none',\n      width: 200,\n      background: 'lightblue',\n      padding: 10,\n      marginRight: 5\n    },\n    onClick: () => setMemoCount(memoCount + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Change memo count\"));\n};\n\nconst ChildComponent = ({\n  action\n}) => {\n  const [value, setValue] = useState(0);\n  console.log(\"action\", action());\n  useEffect(() => {\n    let val = action();\n    setValue(val);\n  }, [action]);\n  return React.createElement(React.Fragment, null, \"Child : \", value);\n};\n\nexport default Memo;","map":{"version":3,"sources":["/home/codecrunch/Documents/react/context-api/src/Memo.js"],"names":["React","useState","useMemo","useCallback","useEffect","Memo","callbackCount","setCallbackCount","memoCount","setMemoCount","memoFunction","console","log","callbackFunction","border","width","background","padding","marginRight","ChildComponent","action","value","setValue","val"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMS,YAAY,GAAG,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EAAuB,aAAvB,EADyB,CAEzB;AACD,GAHD,CALiB,CAUjB;AACA;;;AACA,QAAMK,gBAAgB,GAAGV,WAAW,CAAC,MAAM;AACzCQ,IAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ,EAA2B,iBAA3B,EADyC,CAEzC;;AACA,WAAOA,aAAP;AACD,GAJmC,EAIjC,CAACA,aAAD,CAJiC,CAApC,CAZiB,CAkBjB;;AACAJ,EAAAA,OAAO,CAACQ,YAAD,EAAe,CAACF,SAAD,CAAf,CAAP;AAEA,SACE,0CAEE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEK,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAKE;AAAQ,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,GAAzB;AAA8BC,MAAAA,UAAU,EAAE,WAA1C;AAAuDC,MAAAA,OAAO,EAAE,EAAhE;AAAoEC,MAAAA,WAAW,EAAE;AAAjF,KAAf;AAAqG,IAAA,OAAO,EAAE,MAAMX,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BALF,EAWE;AAAQ,IAAA,KAAK,EAAE;AAAEQ,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,GAAzB;AAA8BC,MAAAA,UAAU,EAAE,WAA1C;AAAuDC,MAAAA,OAAO,EAAE,EAAhE;AAAoEC,MAAAA,WAAW,EAAE;AAAjF,KAAf;AAAqG,IAAA,OAAO,EAAE,MAAMT,YAAY,CAACD,SAAS,GAAG,CAAb,CAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAXF,CADF;AAiBD,CAtCD;;AAwCA,MAAMW,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,CAAD,CAAlC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBQ,MAAM,EAA5B;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,GAAG,GAAGH,MAAM,EAAhB;AACAE,IAAAA,QAAQ,CAACC,GAAD,CAAR;AACD,GAHQ,EAGN,CAACH,MAAD,CAHM,CAAT;AAKA,SACE,sDACWC,KADX,CADF;AAKD,CAbD;;AAeA,eAAehB,IAAf","sourcesContent":["import React, { useState, useMemo, useCallback } from \"react\";\nimport { useEffect } from \"react\";\n\nconst Memo = () => {\n  // We create two states that will keep count of the number of time all hooks are called\n  const [callbackCount, setCallbackCount] = useState(0);\n  const [memoCount, setMemoCount] = useState(0);\n\n  const memoFunction = () => {\n    console.log(memoCount, \"memo called\");\n    // Do something that will take a lot of processing ...\n  };\n\n  // Here if we give an empty array of dependencies, the callback function will return the old value of callbackCount\n  // because useCallback will return its memoized version\n  const callbackFunction = useCallback(() => {\n    console.log(callbackCount, \"callback called\");\n    // Do something with callbackCount ...\n    return callbackCount;\n  }, [callbackCount]);\n\n  // We create the memo hook, when memoCount changes, the function will be executed again\n  useMemo(memoFunction, [memoCount]);\n\n  return (\n    <>\n      {/* This component will receive a function that will change when the dependency value changes */}\n      <ChildComponent action={callbackFunction} />\n\n      {/* Change the callback hook dependency to trigger a change in the child */}\n      <button style={{ border: 'none', width: 200, background: 'lightblue', padding: 10, marginRight: 5 }} onClick={() => setCallbackCount(callbackCount + 1)}>\n        Change callback count\n      </button>\n\n      {/* After creating useMemo, each change of memoCount will trigger the function passed to the hook,\n    otherwise the memoized value will be returned */}\n      <button style={{ border: 'none', width: 200, background: 'lightblue', padding: 10, marginRight: 5 }} onClick={() => setMemoCount(memoCount + 1)}>\n        Change memo count\n      </button>\n    </>\n  );\n};\n\nconst ChildComponent = ({ action }) => {\n  const [value, setValue] = useState(0)\n  console.log(\"action\", action());\n  useEffect(() => {\n    let val = action()\n    setValue(val)\n  }, [action])\n\n  return (\n    <>\n      Child : {value}\n    </>\n  )\n}\n\nexport default Memo;"]},"metadata":{},"sourceType":"module"}